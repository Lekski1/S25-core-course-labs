# This is a basic workflow to help you get started with Actions

name: Golang Web-App

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
    paths:
      - 'app_golang/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'app_golang/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app_golang

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v3
    - name: Set up Golang
      uses: actions/setup-go@v4
      with: 
        go-version: '1.23'
      
    - name: Setup Golang caches
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang-${{ hashFiles('app_golang/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-golang-

    - name: Install dependence
      run: go mod download
    
    - name: Golint 
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./...

    - name: UnitTests
      run: go test ./... 
  
  docker: 
    runs-on: ubuntu-latest
    needs: build
    defaults:
        run:
            working-directory: app_golang
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container 

    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: docker build and push
      uses: docker/build-push-action@v4
      with:
        context: ./app_golang
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/golang-web-app:latest
        cache-from: type=gha,scope=primary
        cache-to: type=gha,scope=primary

  security:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: app_golang

    steps:
    - uses: actions/checkout@master
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Get dependencies
      run: go mod download
    
    - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}.